{"version":3,"sources":["logo.png","store/surveySlice.js","components/multi-select.js","components/single-select.js","components/create-survey.js","components/take-survey.js","components/confirm-survey.js","App.js","reportWebVitals.js","store/responseSlice.js","store/global-store.js","index.js"],"names":["createSurvey","createAsyncThunk","_","thunkApi","a","newSurveyId","String","getState","surveys","length","surveySlice","createSlice","name","initialState","reducers","addQuestion","state","action","payload","surveyId","type","question","options","q","find","s","questions","qId","push","setPublish","console","log","isPublished","extraReducers","fulfilled","MultiSelect","useParams","history","useHistory","dispatch","useDispatch","useState","setOptions","setQuestion","isAddQuestionDisabled","trim","undefined","opt","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","onChange","e","target","value","map","option","optionIdx","setOptionsInArray","Button","onClick","newOptionIdx","splice","addOption","disabled","removeOption","actions","SingleSelect","CreateSurvey","query","useLocation","search","dropdownOpen","setDropdownOpen","dropdowntext","setdropdowntext","useEffect","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","DropdownItem","TakeSurvey","surveyIds","useSelector","globalStore","filter","survey","id","ConfirmSurvey","qIndex","idx","htmlFor","App","src","logo","alt","path","then","unwrapResult","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","responseSlice","increment","decrement","rootReducer","combineReducers","reducer","responses","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.909259d0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.f3f44d0f.png\";","import { createSlice,createAsyncThunk } from '@reduxjs/toolkit';\nexport const createSurvey=createAsyncThunk(\n    'survey/createSurvey',\n    async (_,thunkApi)=>{\n        const newSurveyId=String(thunkApi.getState().surveys.length+1);\n        return newSurveyId;\n    }\n);\nexport const surveySlice = createSlice({\n    name: \"surveys\",\n    initialState: [],\n    reducers: {\n        addQuestion:(state,action)=>{\n            const {surveyId, type, question, options}= action.payload;\n            const q=state.find(s=>s.surveyId===surveyId).questions;\n            const qId=String(q.length+1);\n            q.push({\n                qId,\n                type,\n                question,\n                options\n            });\n        },\n        setPublish:(state,action)=>{\n            const surveyId=action.payload;\n            console.log(surveyId);\n            state.find(s=>s.surveyId===surveyId).isPublished=true;\n        }\n    },\n    extraReducers:{\n        [createSurvey.fulfilled]:(state,action)=>{\n            state.push({\n                questions:[],\n                surveyId:action.payload,\n                isPublished:false\n            });\n        }\n    }\n});","import {\n    Button,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText,\n    Input\n} from 'reactstrap';\nimport { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport {surveySlice} from '../store/surveySlice';\nfunction MultiSelect() {\n    const {surveyId}=useParams();\n    const history=useHistory();\n    const dispatch=useDispatch();\n    const [options, setOptions] = useState([\"\"]);\n    const [question, setQuestion] = useState(\"\");\n    const addOption = (optionIdx) => {\n        if (options.length < 4) {\n            const newOptionIdx = optionIdx + 1;\n            options.splice(newOptionIdx, 0, \"\");\n            setOptions([...options]);\n        }\n    }\n    const removeOption = (optionIdx) => {\n        if (options.length > 1) {\n            options.splice(optionIdx, 1);\n            setOptions([...options]);\n        }\n    }\n    const setOptionsInArray = (value, optionIdx) => {\n        options[optionIdx] = value;\n        setOptions([...options]);\n    }\n    const isAddQuestionDisabled = () => question.trim() === \"\" ||\n        options.find((opt) => opt.trim() === \"\") !== undefined;\n\n    const addQuestion = () => {\n        const payload = {\n            type: \"multiple\",\n            options,\n            question,\n            surveyId\n        }\n        dispatch(surveySlice.actions.addQuestion(payload));\n        history.push(\"/create/\"+surveyId+\"?clear=true\");\n    }\n    const confirmSurvey=()=>{\n        const payload = {\n          type: \"multiple\",\n          options,\n          question,\n          surveyId\n        }\n        dispatch(surveySlice.actions.addQuestion(payload));\n        history.push(\"/confirm/\"+surveyId);\n      }\n\n    return <div className=\"question-container\">\n        <InputGroup className=\"input-grp\">\n            <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>?</InputGroupText>\n            </InputGroupAddon>\n            <Input placeholder=\"Your Question\"\n                onChange={(e) => { \n                    setQuestion(e.target.value)\n                 }}\n                value={question} />\n        </InputGroup>\n\n        <p className=\"options-text\">Options</p>\n        {options.map((option, optionIdx) => {\n            return <div key={\"a\"+optionIdx}>\n                <InputGroup className=\"input-grp\">\n                    <Input placeholder={`Option ${optionIdx + 1}`}\n                        value={option}\n                        onChange={(e) => { setOptionsInArray(e.target.value, optionIdx) }}\n                        key={optionIdx} />\n                    <InputGroupAddon addonType=\"append\">\n                        <Button onClick={() => addOption(optionIdx)} disabled={options.length === 4}>+</Button>\n                        <Button onClick={() => removeOption(optionIdx)} disabled={options.length === 1}>-</Button>\n                    </InputGroupAddon>\n                </InputGroup>\n            </div>;\n        })}\n        {options.length === 4 ? (<div className=\"question-buttons\">\n            <Button className=\"main-btn\"\n                disabled={isAddQuestionDisabled()}\n                onClick={addQuestion}\n            >\n                Add Question\n            </Button>\n            <Button className=\"main-btn\"\n                disabled={isAddQuestionDisabled()}\n                onClick={confirmSurvey}>Publish</Button>\n        </div>) : null}\n\n    </div>;\n}\nexport default MultiSelect;","import { InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { Button } from 'reactstrap';\nimport { useState } from 'react';\nimport { useParams,useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport {surveySlice} from './../store/surveySlice';\nfunction SingleSelect() {\n  const history=useHistory();\n  const {surveyId} = useParams(); //its a string\n  const dispatch = useDispatch();\n  const [options, setOptions] = useState([\"\", \"\"]);\n  const [question, setQuestion] = useState(\"\");\n  const setOptionsInArray = (value, optionIdx) => {\n    options[optionIdx] = value;\n    setOptions([...options]);\n  }\n  const isAddQuestionDisabled = () => question.trim() === \"\" ||\n    options.find((opt) => opt.trim() === \"\") !== undefined;\n\n  const addQuestion = () => {\n    const payload = {\n      type: \"single\",\n      options,\n      question,\n      surveyId\n    }\n    dispatch(surveySlice.actions.addQuestion(payload));\n    history.push(\"/create/\"+surveyId+\"?clear=true\");\n  }\n\n  const publish=()=>{\n    const payload = {\n      type: \"single\",\n      options,\n      question,\n      surveyId\n    }\n    dispatch(surveySlice.actions.addQuestion(payload));\n    history.push(\"/confirm/\"+surveyId);\n    // dispatch(surveySlice.actions.setPublish(surveyId));\n  }\n  return (<div className=\"question-container\">\n    <InputGroup className=\"input-grp\">\n      <InputGroupAddon addonType=\"prepend\">\n        <InputGroupText>?</InputGroupText>\n      </InputGroupAddon>\n      <Input placeholder=\"Your Question\"\n        onChange={(e) => {\n          setQuestion(e.target.value)\n        }}\n        value={question} />\n    </InputGroup>\n    <p className=\"options-text\">Options</p>\n    <InputGroup className=\"input-grp\">\n      <Input placeholder=\"Option 1\"\n        value={options[0]}\n        onChange={(e) => { setOptionsInArray(e.target.value, 0) }}\n        key={0} />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>+</InputGroupText>\n        <InputGroupText>-</InputGroupText>\n      </InputGroupAddon>\n    </InputGroup>\n    <InputGroup className=\"input-grp\">\n      <Input placeholder=\"Option 2\"\n        value={options[1]}\n        onChange={(e) => { setOptionsInArray(e.target.value, 1) }}\n        key={1} />\n      <InputGroupAddon addonType=\"append\">\n        <InputGroupText>+</InputGroupText>\n        <InputGroupText>-</InputGroupText>\n      </InputGroupAddon>\n    </InputGroup>\n    <div className=\"question-buttons\">\n      <Button className=\"main-btn\"\n        disabled={isAddQuestionDisabled()}\n        onClick={addQuestion}>\n        Add Question\n      </Button>\n      <Button className=\"main-btn\" \n        disabled={isAddQuestionDisabled()}\n        onClick={publish}>Publish</Button>\n    </div>\n\n  </div>);\n}\nexport default SingleSelect;","import React, { useEffect, useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport MultiSelect from './multi-select';\nimport SingleSelect from './single-select';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nfunction CreateSurvey() {\n    const {surveyId} = useParams();\n    const history=useHistory();\n    const query=useLocation().search;\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [dropdowntext, setdropdowntext] = useState(\"Select Question Type\");\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n    \n    useEffect(()=>{\n        if(query===\"?clear=true\"){\n            setdropdowntext(\"Select Question Type\");\n            history.push(\"/create/\"+surveyId);\n        }\n    },[query,history,surveyId]);\n\n    return (\n        <div>\n            <p>\n                Survey Id: {surveyId}\n            </p>\n            <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n                <DropdownToggle caret>\n                    {dropdowntext}\n                </DropdownToggle>\n                <DropdownMenu>\n                    <DropdownItem onClick={() => { setdropdowntext(\"Multi-Select\") }}>Multi-Select</DropdownItem>\n                    <DropdownItem onClick={() => { setdropdowntext(\"Single-Select\") }}>Single-Select</DropdownItem>\n                </DropdownMenu>\n            </Dropdown>\n            {(dropdowntext === \"Multi-Select\") ? <MultiSelect /> : null}\n            {(dropdowntext === \"Single-Select\") ? <SingleSelect /> : null}\n        </div>\n    );\n}\n\nexport default CreateSurvey;","import { useSelector } from 'react-redux';\nimport { Button } from 'reactstrap';\n\nexport const TakeSurvey = () => {\n    const surveyIds = useSelector((globalStore) => {\n        return globalStore.surveys.filter(s=>s.isPublished).map((survey) => {\n            return survey.surveyId;\n        })\n    });\n    return (\n        <div>\n            <h2>Select which survey to take</h2>\n            {surveyIds.map((id) => {\n                return (\n                    <div key={id}>\n                        <Button className=\"main-btn\">Survey {id}</Button>\n                    </div>\n                )\n            })}\n        </div>\n\n    );\n\n}","import { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Button } from 'reactstrap';\nimport {surveySlice} from '../store/surveySlice';\n\nfunction ConfirmSurvey() {\n    const { surveyId } = useParams();\n    const history=useHistory();\n    const dispatch=useDispatch();\n    const surveys = useSelector((globalStore) => {\n        return globalStore.surveys;\n    });\n    const survey = surveys.find((survey) => survey.surveyId === surveyId);\n    const publish=()=>{\n        dispatch(surveySlice.actions.setPublish(surveyId));\n        history.push(\"/\");\n    }\n    return (\n        <div>\n            <h2>Confirm Survey</h2>\n            {survey.questions.map((question, qIndex) => {\n                return (\n                    <div className=\"card\" key={\"question\" + qIndex}>\n                        <p>Type:{question.type}</p>\n                        <h3>Question {question.qId}:{question.question}</h3>\n                        <p>Options:</p>\n                        {question.type === \"single\" ? (\n                            question.options.map((opt, idx) => {\n                                return (\n                                    <div key={\"opt\" + idx}>\n                                        <input type=\"radio\" name=\"option\" id={\"opt\" + idx}></input>\n                                        <label htmlFor={\"opt\" + idx}>{opt}</label>\n                                    </div>\n                                )\n                            })\n                        ):(\n                        question.options.map((opt, idx) => {\n                            return (\n                                <div key={\"opt\" + idx}>\n                                    <input type=\"checkbox\" name={\"option\" + idx} id={\"opt\" + idx}></input>\n                                    <label htmlFor={\"opt\" + idx}>{opt}</label>\n                                </div>\n                            )\n                        })\n                        )}\n                    </div>\n                );\n            })}\n            <Button className=\"main-btn\"\n            onClick={publish}>\n                Confirm Survey\n            </Button>\n        </div>\n    );\n}\n\nexport default ConfirmSurvey;","import logo from './logo.png';\nimport './App.css';\nimport { Button } from 'reactstrap';\nimport {\n    Switch,\n    Route,\n    Link,\n    useHistory\n} from \"react-router-dom\";\nimport CreateSurvey from './components/create-survey';\nimport { createSurvey } from './store/surveySlice';\nimport { useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport {TakeSurvey} from './components/take-survey';\nimport ConfirmSurvey from './components/confirm-survey';\nfunction App() {\n    let history = useHistory();\n    const dispatch = useDispatch();\n    const redirectToNewSurvey = () => {\n        dispatch(createSurvey())\n            .then(unwrapResult)\n            .then((newSurveyId) => {\n                // console.log(history);\n                history.push(\"/create/\" + newSurveyId);\n            });\n    }\n    return (\n\n        <div className=\"App\" >\n            <header className=\"App-header\" >\n                <img src={logo}\n                    className=\"App-logo\"\n                    alt=\"logo\" />\n            </header>\n            <Switch>\n                <Route path=\"/create/:surveyId\"><CreateSurvey /></Route>\n                <Route path=\"/take\"><TakeSurvey/></Route>\n                <Route path=\"/confirm/:surveyId\"><ConfirmSurvey/></Route>\n                <Route path=\"/\">\n                    <div>\n                        <Button className=\"main-btn\" \n                        onClick={redirectToNewSurvey}> Create Survey </Button>\n                    </div>\n                    <div>\n                    <Link to=\"/take\"><Button className=\"main-btn\" > Take Survey </Button></Link>\n                    </div>\n                </Route>\n            </Switch>\n        </div>\n\n\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice} from '@reduxjs/toolkit';\nexport const responseSlice = createSlice({\n    name: \"counter\",\n    initialState: 0,\n    reducers: {\n        increment: state => state + 1,\n        decrement: state => state - 1\n    }\n});","import { configureStore } from '@reduxjs/toolkit';\nimport { surveySlice } from './surveySlice';\nimport { responseSlice } from './responseSlice';\nimport { combineReducers } from 'redux';\n\nconst rootReducer=combineReducers({\n    surveys:surveySlice.reducer,\n    responses:responseSlice.reducer\n});\nexport const store = configureStore({ reducer: rootReducer });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { store } from './store/global-store';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}